def solution(number, limit, power):

    result = 0 # 결과값을 저장할 변수

    # 1부터 number까지의 숫자를 반복 순회
    for i in range(1, number + 1):
       
        div_num = 0 # 현재 숫자의 약수 개수를 저장할 변수

        # 현재 숫자 i의 약수를 찾기 위한 루프 (1부터 i의 제곱근까지)
        for j in range(1, int(i ** 0.5) + 1):
            # i가 j로 나누어 떨어지면 j와 i//j 둘 다 약수임
            if i % j == 0:
                div_num += 2  # 약수 개수를 2씩 증가

        # 만약 i가 완전제곱수(제곱근이 정수)인 경우, 약수 중 하나가 중복으로 세어짐
        if i ** 0.5 % 1 == 0:
            div_num -= 1  # 중복 약수 하나를 뺌으로써 정확한 약수 개수 계산

        # 약수 개수가 제한(limit) 이하인 경우, 결과값에 약수 개수를 더함
        if div_num <= limit:
            result += div_num
       
        # 약수 개수가 제한을 초과한 경우, power를 더함
        else:
            result += power

    return result
